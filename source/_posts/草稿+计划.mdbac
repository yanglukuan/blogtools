
## soa && RPC

1、SOA不是一种技术，也不是一个标准，而是一种架构方式。包含了服务提供者，服务调用者和服务管理中心等角色。
SOA的应用已经非常普及，毕竟从诞生到现在已经十多年了。1996年由Gartner公司提出，后经过IBM、SUN、BEA、Oracle等公司完善和推广，SOA的思想和理论逐步得到完善。不管是从概念模型上还是具体应用技术上，都已经得到了全面的发展，也衍生出了很多的新的概念和技术,比如HTTP API,云服务，敏捷开发，持续交付，DevOps等，这些技术的发展和成熟也推动着SOA架构的不断演变。
2、SOA理念
SOA要求开发者从服务集成的角度来设计应用软件，目标为了提高重用性,即使这么做的利益不会马上显现。SOA要求开发者超越应用软件来思考，并考虑复用现有的服务，或者检查如何让服务被重复利用。SOA鼓励使用可替代的技术和方法（例如消息机制），通过把服务联系在一起而非编写新代码来构架应用。
3、soa原则
服务松耦合(Loosely coupled) - 服务之间的关系最小化，只是互相知道。
服务契约 - 服务按照服务描述文档所定义的服务契约行事。
服务抽象 - 除了服务契约中所描述的内容，服务将对外部隐藏逻辑。
服务的重用性 - 将逻辑分布在不同的服务中，以提高服务的重用性。
服务的可组合性 - 一组服务可以协调工作并组合起来形成一个组合服务。
服务自治 – 服务对所封装的逻辑具有控制权
服务无状态 – 服务将一个活动所需保存的资讯最小化。
服务的可被发现性 – 服务需要对外部提供描述资讯，这样可以通过现有的发现机制发现并访问这些服务。[4]

4、维基百科
面向服务的体系结构（英语：service-oriented architecture）是构造分布式计算的应用程序的方法。它将应用程序功能作为服务发送给最终用户或者其他服务。
它采用开放标准、与软件资源进行交互并采用表示的标准方式。

5、web service 是SOA架构的一个实例，通常使用HTTP协议，一般使用web服务器作为服务请求的管道。
包括以soap为协议的xml-rpc和以资源状态转义为实现的rest 
web service 
 1、xml-rpc==》 soap(http+xml)
 2、restful (http+json)

.NET Romoting
java RMI JAX-WS




rest说明
传统意义上的rest可能要和soa划在一个层面，都是软件架构的方式，soa是面向服务的软件架构方式，rest是面向资源的软件架构方式，不过事实上，一些Web Service提供者提供的REST API只有REST的外壳，传输的请求和应答全然是简化了的SOAP，这种新瓶装旧酒的做法只是加深了标准的分歧而已。归根结底REST无法简单地解决一些应用，因此我们只能看到SOAP在REST外壳下的借尸还魂。所以目前rest还是划分到webservice下的一个分支，用以区分以soap为协议的传统webservice。
java rest JAX-RS
.NET rest webAPI 

通用rpc框架通常使用在内部应用之间的通信，rest通常是使用在外部系统之间（api getway）或者移动应用(restful api)中，一般都是在通用rpc框架之上，对已经实现了soa化的接口再次封装为rest接口



6、RPC
远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用，例：Java RMI。

目标
RPC 的主要目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。 为实现该目标，RPC 框架需提供一种透明调用机制让使用者不必显式的区分本地调用和远程调用。

跨进程调用 进程内的方法调用的时间量级是 ns（纳秒），而进程间的 RPC 方法调用时间量级通常是 ms（毫秒），它们之间差着 10 的六次方呢
分布式程序的基础是 RPC 调用，RPC 的本质是网络加对象序列化


RPC是实现soa架构的方式，或者叫做SOA架构模式下的通信方式
也可以基于message的方式进行集成和通信

RPC 是soa架构下的一种通信方式
SOA建立在分布式和异构平台下，需要用RPC在分布式和异构系统中进行通信


RPC框架
仅完成RPC调用
分布式服务框架
RPC调用、服务治理、注册发现、流量监控、服务路由、多传输协议、多序列化协议
大量以各种传输协议和序列化协议自研的RPC框架后者分布式服务框架，thrift、gRPC等




CORBAR 为了解决异构平台的 RPC，使用了 IDL（Interface Definition Language）来定义远程接口，并将其映射到特定的平台语言中。后来大部分的跨语言平台 RPC 基本都采用了此类方式，比如我们熟悉的 Web Service（SOAP），近年开源的 Thrift 等。他们大部分都通过 IDL 定义，并提供工具来映射生成不同语言平台的 user-stub 和 server-stub，并通过框架库来提供 RPCRuntime 的支持。不过貌似每个不同的 RPC 框架都定义了各自不同的 IDL 格式，导致程序员的学习成本进一步上升（苦逼啊），Web Service 尝试建立业界标准，无赖标准规范复杂而效率偏低，否则 Thrift 等更高效的 RPC 框架就没必要出现了。
IDL 是为了跨平台语言实现 RPC 不得已的选择，要解决更广泛的问题自然导致了更复杂的方案。而对于同一平台内的 RPC 而言显然没必要搞个中间语言出来，例如 Java 原生的 RMI，这样对于 java 程序员而言显得更直接简单，降低使用的学习成本。目前市面上提供的 RPC 框架已经可算是五花八门，百家争鸣了。


http://www.cnblogs.com/mindwind/p/5518145.html
https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84
http://www.baike.com/wiki/SOA%E6%9E%B6%E6%9E%84
https://segmentfault.com/q/1010000003049016
http://www.infoq.com/cn/articles/micro-soa-2?utm_source=infoq&utm_campaign=user_page&utm_medium=link
http://www.infoq.com/cn/articles/micro-soa-1?utm_source=infoq&utm_campaign=user_page&utm_medium=link
http://itindex.net/detail/51931-soa-api-%E5%88%86%E8%A3%82
http://www.cnblogs.com/zhangz721/archive/2009/10/02/1577316.html



## 集合框架 String

## GC

## 多线程

## Spring
Spring 接管了对象创建和相互依赖管理的工作，把设计模式隐藏在框架的运用中，
## Spring MVC

## java Web && servlet

## XML 处理

##  mybatis

## mysql

## 数据库查询优化 索引 范式  反范式

## 缓存 readis等

## 链接池  数据库链接  网络链接 长连接 短连接
soa 连接池  长连接

http://liuxing.info/2016/01/05/Tomcat-Jdbc-Pool%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/?utm_source=tuicool&utm_medium=referral


## 网络 OSI模型 TCP/Ip协议  tcp  udp  http 三次握手 
https://waylau.com/tcp-connect-and-close/

## 各种框架 框架原理 源码 
